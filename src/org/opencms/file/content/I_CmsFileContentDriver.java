
package org.opencms.file.content;

import org.opencms.db.CmsDbContext;
import org.opencms.db.I_CmsDriver;
import org.opencms.file.CmsDataAccessException;
import org.opencms.util.CmsUUID;

import java.io.InputStream;

/**
 *
 *
 * @author Yuanuo
 */
public interface I_CmsFileContentDriver extends I_CmsDriver {

    /**
     * Creates a offline content entry for the resource identified by the specified resource id.<p>
     *
     * @param dbc the current database context
     * @param resourceId the resource to create the content for
     * @param content the content to write
     * @return A special data identification used to restore file contents
     *
     * @throws CmsDataAccessException if something goes wrong
     */
    byte[] createContent(CmsDbContext dbc, CmsUUID resourceId, InputStream content) throws CmsDataAccessException;

    /**
     * Creates the online content with versions support.
     * Creates a content entry for the resource identified by the specified resource id.<p>
     *
     * @param dbc the current database context
     * @param resourceId the resource to create the content for
     * @param content the content to write
     * @param publishTag version
     * @param onlineTag true if online version
     * @return A special data identification used to restore file contents
     *
     * @throws CmsDataAccessException if something goes wrong
     */
    byte[] createOnlineContent(CmsDbContext dbc, CmsUUID resourceId, byte[] content, int publishTag, boolean onlineTag)
    throws CmsDataAccessException;

    /**
     * For some can not be identified by the file name or file size resources,
     * It need to determine the content of the file can be restorable.
     * 
     * @param content the file content to read
     * 
     * @return true If can restore, false Not generated by this driver
     */
    boolean isReadable(byte[] content);
    
    /**
     * Reads the content of a file specified by it's resource ID.<p>
     *
     * @param dbc the current database context
     * @param resourceId the resource
     * @param content A special data identification content from main db
     * @return the file content
     *
     * @throws CmsDataAccessException if something goes wrong
     */
    InputStream readContent(CmsDbContext dbc, CmsUUID resourceId, byte[] content) throws CmsDataAccessException;

    /**
     * Writes the offline resource content with the specified resource id.<p>
     *
     * @param dbc the current database context
     * @param resourceId the content to update
     * @param content the new content of the file
     * @return A special data identification used to restore file contents
     *
     * @throws CmsDataAccessException if something goes wrong
     */
    byte[] writeContent(CmsDbContext dbc, CmsUUID resourceId, InputStream content) throws CmsDataAccessException;

    /**
     * Remove the online/offline resource content with the specified resource id.<p>
     *
     * @param dbc the current database context
     * @param onlineProject TODO
     * @param resourceId the resource to remove
     * @throws CmsDataAccessException if something goes wrong
     */
    void removeContent(CmsDbContext dbc, boolean onlineProject, CmsUUID resourceId) throws CmsDataAccessException;

    /**
     * Remove the history resource content with the specified resource id.<p>
     *
     * @param dbc the current database context
     * @param resourceId the resource to remove
     * @param minVersionToKeep the minimum version to keep.
     * @throws CmsDataAccessException if something goes wrong
     */
    void removeHistoryContent(CmsDbContext dbc, CmsUUID resourceId, int minVersionToKeep) throws CmsDataAccessException;
}
